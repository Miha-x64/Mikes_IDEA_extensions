<idea-plugin url="https://github.com/Miha-x64/Mikes_IDEA_extensions">

    <id>net.aquadc.mike.plugin</id>
    <name>Mike's IDEA extensions</name>
    <category>Inspection</category>
    <vendor email="silizium@ok.de" url="http://aquadc.net/">Mike</vendor>

    <description><![CDATA[
      Some great inspections, quickfixes, tools. Well, only inspections at the moment.

      <h3>Java inspections</h3>
      <ul>
        <li>BigDecimal instantiation can be replaced with constant <em>by <a href="http://github.com/stokito/">stokito</a></em></li>
        <li>BigDecimal.compareTo(ZERO) can be replaced with signum() <em>by <a href="http://github.com/stokito/">stokito</a></em></li>
      </ul>

      <h3>UAST (Java + Kotlin) inspections</h3>
      <ul>
        <li>Atomic can be replaced with volatile</li>
        <li>Allocation should be cached (Enum.values(), new Gson(), ...)</li>
      </ul>

      <h3>Kotlin inspections</h3>
      <ul>
        <li>Heavyweight property delegation</li>
        <li>Declaration name is Java keyword</li>
        <li>Inline function leaks anonymous declaration</li>
        <li>Anonymous function won't be inlined;
          function cannot be inlined if it is a receiver of an extension function</li>
      </ul>

      <h3>Android inspections</h3>
      <ul>
        <li>&lt;include layout="?themeAttribute"&gt; requires Marshmallow</li>
        <li>&lt;view class="@resource or ?themeAttribute"&gt; is not supported</li>
        <li>&lt;drawable android:tint and android:tintMode&gt; require Lollipop</li>
        <li><code>@TargetApi</code> should be replaced with <code>@RequiresApi</code></li>
        <li>Use of reflective ObjectAnimator/PropertyValuesHolder</li>
      </ul>

      <h3>RegExp inspections</h3>
      <ul>
        <li>Bad Cyrillic character range</li>
      </ul>

      <h3>Tooltips/hints</h3>
      <ul>
        <li>Upcast to interface, e. g.<br/>putExtra(list<code> as Serializable</code>) (Java Only)</li>
        <li>Method override from superclass, e. g.<br/>@Override <code>from Runnable</code>,<br/>override <code>Runnable</code> fun run()</li>
      </ul>

      <a href="https://github.com/Miha-x64/Mikes_IDEA_extensions">Source code on GitHub</a>
    ]]></description>

    <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description -->
    <idea-version since-build="183.2940.10"/>

    <extensions defaultExtensionNs="com.intellij">

        <localInspection
            language="kotlin"
            shortName="ktPropBy" displayName="Property delegation"
            groupPath="Kotlin" groupName="Performance"
            enabledByDefault="true" level="WARNING"
            implementationClass="net.aquadc.mike.plugin.kotlin.KtPropByInspection" />
        <!-- TODO: is there a way to make this run only for production sources? -->

        <localInspection
            language="kotlin"
            shortName="ktIdIsJavaKw" displayName="Declaration name is Java keyword"
            groupPath="Kotlin" groupName="Java interop issues"
            enabledByDefault="true" level="WARNING"
            implementationClass="net.aquadc.mike.plugin.kotlin.KtIdIsJavaKeywordInspection" />

        <localInspection
            language="UAST"
            shortName="atomicAsVolatile" displayName="Atomic can be replaced with volatile"
            groupName="JVM languages"
            enabledByDefault="true" level="WARNING"
            implementationClass="net.aquadc.mike.plugin.memory.AtomicAsVolatileInspection" />

        <localInspection
            language="UAST"
            shortName="uncachedAlloc" displayName="Allocation should be cached"
            groupPath="JVM languages" groupName="Performance"
            enabledByDefault="true" level="WARNING"
            implementationClass="net.aquadc.mike.plugin.memory.UncachedAllocInspection" />

        <localInspection
            language="kotlin"
            shortName="ktNoinlineFunc" displayName="Function won't be inlined"
            groupPath="Kotlin" groupName="Performance"
            enabledByDefault="true" level="WARNING"
            implementationClass="net.aquadc.mike.plugin.kotlin.KtNoinlineFuncInspection" />

        <localInspection
            language="kotlin"
            shortName="ktInlineFunctionLeaksAnonymous" displayName="Inline function leaks anonymous declaration"
            groupPath="Kotlin" groupName="Performance"
            enabledByDefault="true" level="WARNING"
            implementationClass="net.aquadc.mike.plugin.kotlin.KtInlineFunctionLeaksAnonymousDeclaration" />

        <localInspection
            language="JAVA"
            shortName="BigDecimalConstant" displayName="BigDecimal instantiation can be replaced with constant"
            groupPath="Java" groupName="Performance"
            enabledByDefault="true" cleanupTool="true" level="WARNING"
            implementationClass="net.aquadc.mike.plugin.bigdecimal.BigDecimalConstantInspection"/>

        <localInspection
            language="JAVA"
            shortName="BigDecimalSignum" displayName="BigDecimal.compareTo(ZERO) can be replaced with signum()"
            groupPath="Java" groupName="Performance"
            enabledByDefault="true" cleanupTool="true" level="WARNING"
            implementationClass="net.aquadc.mike.plugin.bigdecimal.BigDecimalSignumInspection"/>

        <!--localInspection
            language="UAST"
            shortName="SortedAnno" displayName="@Sorted annotation"
            groupPath="Java" groupName="Performance"
            enabledByDefault="true" level="ERROR"
            implementationClass="net.aquadc.mike.plugin.SortedAnnoInspection" /-->

        <localInspection
            language="RegExp"
            shortName="BadCyrillicRegexp" displayName="Bad Cyrillic character range"
            groupName="RegExp"
            enabledByDefault="true" level="WARNING"
            implementationClass="net.aquadc.mike.plugin.regexp.BadCyrillicRegexp" />
    </extensions>

    <project-components>
        <component>
            <implementation-class>net.aquadc.mike.plugin.interfaces.UpcastHints</implementation-class>
        </component>
    </project-components>

    <depends>com.intellij.modules.lang</depends>
    <depends>com.intellij.modules.java</depends>
    <depends>org.jetbrains.kotlin</depends>
    <depends optional="true" config-file="withAndroid.xml">org.jetbrains.android</depends>

    <actions>
    </actions>

</idea-plugin>
